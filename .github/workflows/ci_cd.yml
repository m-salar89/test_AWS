name: AWS_test

on: 

  push:

    branches: [main]

jobs: 

  test:

    runs-on: ubuntu-latest

    steps:

      - name: checkout repository
        uses:  actions/checkout@v4
      
      - name: set up Python
        #bei uses braucht man immer eine version .zB @4 oder @5 jenach verwendetem Program 
        uses: actions/setup-Python@v5 
        with:
          python-version: "3.12"

      - name: Install dependencies for test (if any)
        run: | 
         
          # Projektabhängigkeitsprüfung
          python -m pip install --upgrade pip 
          pip install pytest
          pip install boto3
          pip install moto 
          if [ -f lambdaForTestingGithub/requirements.txt ]; then
            pip install -r lambdaForTestingGithub/requirements.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else 
            echo "No requirements found -> continuing"
          fi 

   
          
          # installiere das lokale Paket editierbar, damit Imports funktionieren
          pip install -e ./lambdaForTestingGithub || true

      - name: Run pytest
        # damit die lambda-pkg-src importierbar ist, falls die tests die src-Module nutzen
        env:
          PYTHONPATH: lambdaForTestingGithub/src
        run: | 

          mkdir -p test-reports 
          # führe alle Tests im Repo aus (passt, wenn tests/ oder projekt-root Tests enthält)
          pytest -q --junitxml=test-reports/junit.xml -rA

      - name: Uploud test reporte
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: test-reports/

  deploy: 
    needs: test
    runs-on: ubuntu-latest

    env:
      FUNCTION_NAME: lambdaForTestingGithub
      REGION: eu-north-1
      ZIP_NAME: lambdaForTestingGithub.zip
      ROLE_ARN: arn:aws:iam::329998969228:role/CreatAndDeployFromYaml   # muss existieren
      RUNTIME: python3.11
      HANDLER: app.lambda_handler                                # z.B. package.module:function
      ARCH: x86_64  
      TIMEOUT: "30"                                              # optional
      MEMORY: "256"   

    steps: 
      - name: checkout repository
        uses: actions/checkout@v4

      - name: Debug workspace (optional, hilft bei Pfadproblemen)
        run: |
          pwd
          ls -la
          ls -la zl_create_user_json_iot || true
          ls -la zl_create_user_json_iot/src || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (if any)
        working-directory: ./lambdaForTestingGithub
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt -t src/
          else
            echo "No requirements.txt -> skipping dependency install"
            mkdir -p src
          fi
      - name: Build ZIP at repo root
        run: |
          cd lambdaForTestingGithub/src
          zip -r ../../$ZIP_NAME .
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with: 
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.REGION }}

      - name: Verify identity and list functions (quick sanity)
        run: |
          aws sts get-caller-identity
          aws lambda list-functions --region "${REGION}" | jq -r '.Functions[].FunctionName' || true
      
      - name: Deploy Lambda (update code)
        run: |
          test -f "${ZIP_NAME}" || { (echo "ZIP not found" && exit 1) }
          if aws lambda get-function --function-name "${FUNCTION_NAME}" --region "${REGION}" >/dev/null 2>&1; then
            echo  "Function '${FUNCTION_NAME}' existiert in '${REGION}' ->Code update."
       
         
            aws lambda update-function-code \
              --function-name "${FUNCTION_NAME}" \
              --zip-file "fileb://$ZIP_NAME" \
              --region "${REGION}"

            # optional warten bis Update aktiv ist
            aws lambda wait function-updated --function-name "${FUNCTION_NAME}" --region "${REGION}"
            echo "Update fertig."
          else
            echo "Lambda ${FUNCTION_NAME} nicht gefunden → Erstelle…"
            aws lambda create-function \
              --function-name "${FUNCTION_NAME}" \
              --runtime "${RUNTIME}" \
              --handler "${HANDLER}" \
              --role "${ROLE_ARN}" \
              --architectures "${ARCH}" \
              --zip-file "fileb://${ZIP_NAME}" \
              --region "${REGION}" \
              ${TIMEOUT:+--timeout "${TIMEOUT}"} \
              ${MEMORY:+--memory-size "${MEMORY}"} >/dev/null

            # warten bis Funktion aktiv ist (verhindert Race-Conditions bei direkt folgendem Invoke)
            aws lambda wait function-active --function-name "${FUNCTION_NAME}" --region "${REGION}"
            echo "Erstellung fertig."
          fi

          

